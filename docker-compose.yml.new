version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.secure
    image: server-inventory:latest
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:postgres@db:5432/serverdb
      - PORT=5000
    depends_on:
      - db
    networks:
      - server-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=serverdb
    networks:
      - server-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Kong API Gateway için veritabanı
  kong-db:
    image: postgres:15-alpine
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kongpass
    networks:
      - server-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong veritabanı migrasyonu
  kong-migration:
    image: kong:3.0
    depends_on:
      - kong-db
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - server-network

  # Kong API Gateway
  kong:
    image: kong:3.0
    depends_on:
      - kong-db
      - kong-migration
      - app
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
    ports:
      - "8000:8000"  # Kong proxy port - Uygulama buradan erişilecek
      - "8001:8001"  # Kong admin API
    networks:
      - server-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kong başlatıldıktan sonra servis ve route yapılandırmasını otomatik yapan servis
  kong-setup:
    image: curlimages/curl:latest
    depends_on:
      - kong
      - app
    entrypoint: /bin/sh
    command: >
      -c "
      # Kong API Gateway'in başlamasını bekle
      sleep 10;
      
      # Servisi oluştur
      curl -i -X POST http://kong:8001/services \
        --data 'name=stok-service' \
        --data 'url=http://app:5000';
      
      # Route oluştur - /stok yolunu yönlendir
      curl -i -X POST http://kong:8001/services/stok-service/routes \
        --data 'name=stok-route' \
        --data 'paths[]=/stok' \
        --data 'paths[]=/stok/' \
        --data 'strip_path=false';
        
      echo 'Kong yapılandırması tamamlandı.'
      "
    networks:
      - server-network
    restart: on-failure

networks:
  server-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  kong_data:
    driver: local
